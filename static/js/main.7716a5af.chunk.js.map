{"version":3,"sources":["utils/getRandom.js","App.js","utils/getRandomColor.js","utils/modifyColor.js","serviceWorker.js","index.js"],"names":["getRandom","maxValue","minValue","Math","random","App","props","state","points","total","correct","wrong","level","difficulty","colors","this","startNewLevel","randomColorValue","Array","fill","undefined","map","isCorrect","value","randomColorIndex","randomColor","color","newColor","timesToChange","randomOffset","randomIndex","modifyColor","setState","className","cell","index","key","style","backgroundColor","join","onClick","handleColorClick","renderDifficulty","renderPoints","renderBoard","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAKaA,G,MAAY,SAACC,GAA4B,IAAlBC,EAAiB,uDAAN,EAC7C,OAASC,KAAKC,UAAYH,EAAWC,EAAW,IAAO,GAAKA,I,OCAjDG,EAAb,kDAWE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKDC,MAAQ,CACXC,OAAQ,CACNC,MAAO,EACPC,QAAS,EACTC,MAAO,GAGTC,MAAO,CACLC,WAAYP,EAAMO,WAClBC,OAAQ,KAfK,EAXrB,gEAgCIC,KAAKC,kBAhCT,sCAoCI,IAAMC,ECpCD,CAAEjB,EAAU,KAAMA,EAAU,KAAMA,EAAU,MDsC3Cc,EAAS,IAAII,MAAM,GACtBC,UAAKC,GACLC,KAAI,iBAAO,CACVC,WAAW,EACXC,MAAON,MAGLO,EAAmBxB,EAAU,GACjCyB,EAAcX,EAAOU,GAEvBV,EAAOU,GE/CgB,SAACE,EAAOb,GAYjC,IARA,IAAMc,EAAW,CACfL,WAAW,EACXC,MAAM,YAAMG,EAAMH,QAGhBK,EAAgB,GAAkB,EAAbf,EACvBgB,EAAgC,IAAjB7B,EAAU,GAAW,GAAK,EAEpC4B,KAAiB,CACtB,IAAME,EAAc9B,EAAU,GAC9B2B,EAASJ,MAAMO,IAAgBD,EAE3BF,EAASJ,MAAMO,GAAe,IAChCH,EAASJ,MAAMO,GAAe,GAG5BH,EAASJ,MAAMO,GAAe,MAChCH,EAASJ,MAAMO,GAAe,KAIlC,OAAOH,EFsBsBI,CAAYN,EAAaV,KAAKR,MAAMK,MAAMC,YAErEE,KAAKiB,SAAS,CACZpB,MAAM,2BACDG,KAAKR,MAAMK,OADX,IAEHE,eArDR,uCA6DmBQ,GAAY,IAAD,OAC1BP,KAAKiB,SAAS,CACZxB,OAAQ,CACNC,MAAOM,KAAKR,MAAMC,OAAOC,MAAQ,EACjCC,QAASK,KAAKR,MAAMC,OAAOE,SAAWY,EAAY,EAAI,GACtDX,MAAOI,KAAKR,MAAMC,OAAOG,OAASW,EAAY,EAAI,MAEnD,WACD,EAAKN,qBArEX,yCA0EI,OACE,yBAAKiB,UAAW,kBAAhB,eACelB,KAAKR,MAAMK,MAAMC,cA5EtC,qCAkFI,OACE,yBAAKoB,UAAW,cACd,yBAAKA,UAAW,oBAAhB,iBAAmDlB,KAAKR,MAAMC,OAAOC,OACrE,yBAAKwB,UAAW,sBAAhB,YAAgDlB,KAAKR,MAAMC,OAAOE,SAClE,yBAAKuB,UAAW,oBAAhB,UAA4ClB,KAAKR,MAAMC,OAAOG,UAtFtE,oCA2FiB,IAAD,OACZ,OACE,yBAAKsB,UAAW,aACblB,KAAKR,MAAMK,MAAME,OAAOO,KAAI,SAACa,EAAMC,GAClC,OACE,yBACEC,IAAKD,EACLF,UAAW,iBACXI,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAKX,MAAMgB,KAAK,MAAzB,MACxBC,QAAS,kBAAM,EAAKC,iBAAiBP,EAAKZ,oBApGxD,+BA8GI,OACE,yBAAKW,UAAW,OACblB,KAAK2B,mBACL3B,KAAK4B,eACL5B,KAAK6B,mBAlHd,GAAyBC,aAAZxC,EAIJyC,aAAe,CACpBjC,WAAY,GGCIkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7716a5af.chunk.js","sourcesContent":["/**\n * @param {Number} maxValue\n * @param {Number} minValue\n * @returns {Number}\n */\nexport const getRandom = (maxValue, minValue = 0) => {\n  return ((Math.random() * (maxValue - minValue + 1)) >> 0) + minValue;\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { getRandomColor } from './utils/getRandomColor';\nimport { getRandom } from './utils/getRandom';\nimport { modifyColor } from './utils/modifyColor';\n\nexport class App extends Component {\n  /**\n   * @type {AppProps}\n   */\n  static defaultProps = {\n    difficulty: 1,\n  };\n\n  /**\n   * @param {AppProps} props\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @type {AppState}\n     */\n    this.state = {\n      points: {\n        total: 0,\n        correct: 0,\n        wrong: 0,\n      },\n\n      level: {\n        difficulty: props.difficulty,\n        colors: [],\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.startNewLevel();\n  }\n\n  startNewLevel() {\n    const randomColorValue = getRandomColor();\n\n    const colors = new Array(6)\n      .fill(undefined)\n      .map(() => ({\n        isCorrect: false,\n        value: randomColorValue,\n      }));\n\n    const randomColorIndex = getRandom(5),\n      randomColor = colors[randomColorIndex];\n\n    colors[randomColorIndex] = modifyColor(randomColor, this.state.level.difficulty);\n\n    this.setState({\n      level: {\n        ...this.state.level,\n        colors,\n      },\n    });\n  }\n\n  /**\n   * @param {Boolean} isCorrect\n   */\n  handleColorClick(isCorrect) {\n    this.setState({\n      points: {\n        total: this.state.points.total + 1,\n        correct: this.state.points.correct + (isCorrect ? 1 : 0),\n        wrong: this.state.points.wrong + (isCorrect ? 0 : 1),\n      },\n    }, () => {\n      this.startNewLevel();\n    });\n  }\n\n  renderDifficulty() {\n    return (\n      <div className={'app-difficulty'}>\n        Difficulty: {this.state.level.difficulty}\n      </div>\n    );\n  }\n\n  renderPoints() {\n    return (\n      <div className={'app-points'}>\n        <div className={'app-points-total'}>Total points: {this.state.points.total}</div>\n        <div className={'app-points-correct'}>Correct: {this.state.points.correct}</div>\n        <div className={'app-points-wrong'}>Wrong: {this.state.points.wrong}</div>\n      </div>\n    );\n  }\n\n  renderBoard() {\n    return (\n      <div className={'app-board'}>\n        {this.state.level.colors.map((cell, index) => {\n          return (\n            <div\n              key={index}\n              className={'app-board-cell'}\n              style={{ backgroundColor: `rgb(${cell.value.join(', ')})` }}\n              onClick={() => this.handleColorClick(cell.isCorrect)}\n            >\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className={'app'}>\n        {this.renderDifficulty()}\n        {this.renderPoints()}\n        {this.renderBoard()}\n      </div>\n    );\n  }\n}\n","import { getRandom } from './getRandom';\n\n/**\n * @returns {Array<Number>}\n */\nexport const getRandomColor = () => {\n  return [ getRandom(255), getRandom(255), getRandom(255) ];\n};\n","import { getRandom } from \"./getRandom\";\n\n/**\n * @param {AppLevelColor} color\n * @param {Number} difficulty\n * @returns {AppLevelColor}\n */\nexport const modifyColor = (color, difficulty) => {\n  /**\n   * @type {AppLevelColor}\n   */\n  const newColor = {\n    isCorrect: true,\n    value: [ ...color.value ],\n  };\n\n  let timesToChange = 30 - difficulty * 5,\n    randomOffset = getRandom(1) === 1 ? 1 : -1;\n\n  while (timesToChange--) {\n    const randomIndex = getRandom(2);\n    newColor.value[randomIndex] += randomOffset;\n\n    if (newColor.value[randomIndex] < 0) {\n      newColor.value[randomIndex] = 0;\n    }\n\n    if (newColor.value[randomIndex] > 255) {\n      newColor.value[randomIndex] = 255;\n    }\n  }\n\n  return newColor;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}