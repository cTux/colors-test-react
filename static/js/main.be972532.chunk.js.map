{"version":3,"sources":["components/StartScreen/StartScreen.js","utils/getRandom.js","utils/getRandomColors.js","utils/getRandomColor.js","utils/modifyColor.js","utils/getCurrentDifferences.js","utils/getCurrentSize.js","actions/newGame.js","actions/newGame.config.js","utils/getConfig.default.js","utils/getConfig.js","actions/setConfig.js","components/StartScreen/StartScreen.connect.js","components/Board/Board.js","actions/decrementTimer.js","actions/colorClick.js","components/Board/Board.connect.js","components/App/App.js","components/App/App.connect.js","reducers/main.default.js","actions/newRound.js","serviceWorker.js","index.js","reducers/main.js"],"names":["StartScreen","className","this","props","config","sizes","map","size","index","classes","cn","isDefault","key","onClick","setConfig","value","differences","difference","game","isStarted","isFinished","points","correct","accuracy","tg","renderConfig","startNewGame","Component","getRandom","maxValue","minValue","Math","random","getRandomColors","randomColorValue","getRandomColor","color","some","n","colorsNumber","colors","Array","fill","undefined","isCorrect","randomColorIndex","randomColor","newColor","randomOffset","randomIndex","modifyColor","getCurrentDifferences","state","find","getCurrentSize","newGame","secondsLeft","board","total","wrong","defaultConfig","gotVersion","ls","remove","action","payload","optionsName","option","saveConfig","StartScreenConnected","connect","dispatch","type","setConfigAction","Board","interval","latestHover","startInterval","endInterval","setInterval","decrementTimer","clearInterval","colorClick","cell","style","backgroundColor","join","onMouseMove","handleHover","handleColorClick","endGameProperties","ceil","BoardConnected","colorClickAction","App","AppConnected","defaultState","newRound","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be972532.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as cn from 'classnames';\nimport './StartScreen.css';\n\nexport class StartScreen extends Component {\n  renderConfig() {\n    return (\n      <div className={'app-start-screen-config'}>\n        <div className={'app-start-screen-config-size'}>\n          <div className={'app-start-screen-config-size-title'}>Board size</div>\n          <div className={'app-start-screen-config-sizes option-container'}>\n            {this.props.config.sizes.map((size, index) => {\n              const classes = cn({\n                'option': true,\n                'app-start-screen-config-sizes-size': true,\n                'option-default': size.isDefault,\n              });\n              return (\n                <div\n                  key={index}\n                  className={classes}\n                  onClick={() => this.props.setConfig('sizes', size.value)}\n                >{size.value}</div>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className={'app-start-screen-config-difference'}>\n          <div className={'app-start-screen-config-difference-title'}>Color differences</div>\n          <div className={'app-start-screen-config-differences option-container'}>\n            {this.props.config.differences.map((difference, index) => {\n              const classes = cn({\n                'option': true,\n                'app-start-screen-config-differences-difference': true,\n                'option-default': difference.isDefault,\n              });\n              return (\n                <div\n                  key={index}\n                  className={classes}\n                  onClick={() => this.props.setConfig('differences', difference.value)}\n                >{difference.value}</div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    if (this.props.game.isStarted) {\n      return;\n    }\n\n    if (!this.props.game.isFinished) {\n      return (\n        <div className={'app-start-screen'}>\n          <div className={'app-start-screen-title'}>Find a different color!</div>\n          {this.renderConfig()}\n          <div className={'app-start-screen-btn-container'}>\n            <button className={'app-start-game-btn'} onClick={this.props.startNewGame}>\n              Start\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className={'app-start-screen'}>\n        <div className={'app-start-screen-title'}>Correct: {this.props.points.correct},\n          Accuracy: {this.props.points.accuracy}%,\n          Points: {this.props.points.tg}\n        </div>\n        {this.renderConfig()}\n        <div className={'app-start-screen-btn-container'}>\n          <button className={'app-start-game-btn'} onClick={this.props.startNewGame}>\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * @param {Number} maxValue\n * @param {Number} minValue\n * @returns {Number}\n */\nexport const getRandom = (maxValue, minValue = 0) => {\n  return ((Math.random() * (maxValue - minValue + 1)) >> 0) + minValue;\n};\n","import { getRandom } from './getRandom';\nimport { getRandomColor } from './getRandomColor';\nimport { modifyColor } from './modifyColor';\n\nexport const getRandomColors = (size, differences) => {\n  const randomColorValue = getRandomColor(),\n    colorsNumber = size * size;\n\n  const colors = new Array(colorsNumber)\n    .fill(undefined)\n    .map(() => ({\n      isCorrect: false,\n      value: randomColorValue,\n    }));\n\n  const randomColorIndex = getRandom(colorsNumber - 1),\n    randomColor = colors[randomColorIndex];\n\n  colors[randomColorIndex] = modifyColor(randomColor, differences);\n\n  return colors;\n};\n","import { getRandom } from './getRandom';\n\n/**\n * @returns {Array<Number>}\n */\nexport const getRandomColor = () => {\n  const color =  [ getRandom(255), getRandom(255), getRandom(255) ];\n  // Prevents dark colors\n  if (color.some(n => n > 45)) {\n    return color;\n  }\n\n  return getRandomColor();\n};\n","import { getRandom } from './getRandom';\n\nexport const modifyColor = (color, differences = 25) => {\n  const newColor = {\n    isCorrect: true,\n    value: [ ...color.value ],\n  };\n\n  const randomOffset = getRandom(1) === 1 ? 1 : -1;\n\n  while (differences) {\n    const randomIndex = getRandom(2);\n    newColor.value[randomIndex] += randomOffset;\n\n    if (newColor.value[randomIndex] < 0) {\n      newColor.value[randomIndex] = 0;\n      continue;\n    }\n\n    if (newColor.value[randomIndex] > 255) {\n      newColor.value[randomIndex] = 255;\n      continue;\n    }\n\n    differences--;\n  }\n\n  return newColor;\n};\n","/**\n * @param {AppState} state\n * @returns {Number}\n */\nexport const getCurrentDifferences = state => {\n  return state.config.differences.find(n => n.isDefault).value;\n};\n","/**\n * @param {AppState} state\n * @returns {Number}\n */\nexport const getCurrentSize = state => {\n  return state.config.sizes.find(n => n.isDefault).value;\n};\n","import { secondsLeft } from './newGame.config';\nimport { getRandomColors } from '../utils/getRandomColors';\nimport { getCurrentDifferences } from '../utils/getCurrentDifferences';\nimport { getCurrentSize } from '../utils/getCurrentSize';\n\n/**\n * @param {AppState} state\n * @returns {AppState}\n */\nexport const newGame = (state) => {\n  return {\n    ...state,\n    game: {\n      ...state.game,\n      isStarted: true,\n      isFinished: false,\n      secondsLeft,\n    },\n    board: {\n      ...state.board,\n      colors: getRandomColors(\n        getCurrentSize(state),\n        getCurrentDifferences(state),\n      ),\n    },\n    points: {\n      total: 0,\n      correct: 0,\n      wrong: 0,\n      accuracy: 0,\n      tg: 0,\n    },\n  };\n};\n\n/**\n * @returns {Object}\n */\nexport const newGameAction = () => ({\n  type: 'NEW_GAME',\n});\n","export const secondsLeft = 60;\n","/**\n * @type {AppStateConfig}\n */\nexport const defaultConfig = {\n  differences: [{\n    value: 50,\n    isDefault: true,\n  }, {\n    value: 35,\n    isDefault: false,\n  }, {\n    value: 20,\n    isDefault: false,\n  }],\n\n  sizes: [{\n    value: 2,\n    isDefault: true,\n  }, {\n    value: 3,\n    isDefault: false,\n  }, {\n    value: 4,\n    isDefault: false,\n  }]\n};\n","import ls from 'local-storage';\nimport { defaultConfig } from './getConfig.default';\n\nconst configKeyName = 'config',\n  versionKeyName = 'version',\n  version = '1';\n\n/**\n * @returns {AppStateConfig}\n */\nexport const getConfig = () => {\n  return ls(configKeyName) || defaultConfig;\n};\n\nexport const saveConfig = (config) => {\n  ls(configKeyName, config);\n};\n\n/**\n * @type {String}\n */\nconst gotVersion = ls(versionKeyName);\n\nif (gotVersion && gotVersion !== version) {\n  ls.remove(configKeyName);\n}\n\nls(versionKeyName, version);\n","import { saveConfig } from '../utils/getConfig';\n\n/**\n * @param {AppState} state\n * @param {Object} action\n * @returns {AppState}\n */\nexport const setConfig = (state, action) => {\n  const { optionsName, value } = action.payload;\n  const config = {\n      ...state.config,\n      [optionsName]: state.config[optionsName].map(option => {\n        if (option.value === value) {\n          return {\n            value,\n            isDefault: true,\n          };\n        }\n\n        return {\n          ...option,\n          isDefault: false,\n        };\n      }),\n    };\n\n  saveConfig(config);\n\n  return {\n    ...state,\n    config,\n  };\n};\n\n/**\n * @param {String} optionsName\n * @param {Number} value\n * @returns {Object}\n */\nexport const setConfigAction = (optionsName, value) => ({\n  type: 'SET_CONFIG',\n  payload: {\n    optionsName,\n    value,\n  },\n});\n","import { connect } from 'react-redux';\nimport { StartScreen } from './StartScreen';\nimport { newGameAction } from '../../actions/newGame';\nimport { setConfigAction } from '../../actions/setConfig';\n\n/**\n * @param {AppState} state\n * @returns {AppProps}\n */\nconst mapStateToProps = state => ({\n  game: {\n    isStarted: state.game.isStarted,\n    isFinished: state.game.isFinished,\n  },\n  config: state.config,\n  points: {\n    correct: state.points.correct,\n    accuracy: state.points.accuracy,\n    tg: state.points.tg,\n  },\n});\n\nconst mapDispatchToProps = dispatch => ({\n  startNewGame: () => dispatch(newGameAction()),\n\n  /**\n   * @param {String} optionsName\n   * @param {Number} value\n   */\n  setConfig: (optionsName, value) => dispatch(setConfigAction(optionsName, value)),\n});\n\nexport const StartScreenConnected =\n  connect(mapStateToProps, mapDispatchToProps)(StartScreen);\n","import React, { Component } from 'react';\nimport './Board.css';\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.interval = -1;\n    this.latestHover = -1;\n  }\n\n  componentDidMount() {\n    this.startInterval();\n  }\n\n  componentWillUnmount() {\n    this.endInterval();\n  }\n\n  startInterval() {\n    this.interval = setInterval(() => this.props.decrementTimer(), 1000);\n  }\n\n  endInterval() {\n    clearInterval(this.interval);\n  }\n\n  /**\n   * @param {Number} index\n   */\n  handleHover(index) {\n    this.latestHover = index;\n  }\n\n  /**\n   * @param {Number} index\n   * @param {Boolean} isCorrect\n   */\n  handleColorClick(index, isCorrect) {\n    if (this.latestHover === index) {\n      this.props.colorClick(isCorrect);\n    }\n  }\n\n  render() {\n    return (\n      <div className={`app-board size-${this.props.size}`}>\n        <div className={'app-board-timer'}>\n          {this.props.game.secondsLeft}\n        </div>\n        {this.props.board.colors.map((cell, index) => {\n          return (\n            <div\n              key={index}\n              className={'app-board-cell'}\n              style={{ backgroundColor: `rgb(${cell.value.join(', ')})` }}\n              onMouseMove={() => this.handleHover(index)}\n              onClick={() => this.handleColorClick(index, cell.isCorrect)}\n            >\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n","/**\n * @param {AppState} state\n * @returns {AppState}\n */\nexport const decrementTimer = (state) => {\n  const secondsLeft = state.game.secondsLeft - 1,\n    endGameProperties = {};\n\n  if (!secondsLeft) {\n    endGameProperties.isStarted = false;\n    endGameProperties.isFinished = true;\n  }\n\n  return {\n    ...state,\n    game: {\n      ...state.game,\n      ...endGameProperties,\n      secondsLeft,\n    },\n  };\n};\n\n/**\n * @returns {Object}\n */\nexport const decrementTimerAction = () => ({\n  type: 'DECREMENT_TIMER',\n});\n","import { getRandomColors } from '../utils/getRandomColors';\nimport { getCurrentDifferences } from '../utils/getCurrentDifferences';\nimport { getCurrentSize } from '../utils/getCurrentSize';\n\n/**\n * @param {AppState} state\n * @param {Object} action\n * @returns {AppState}\n */\nexport const colorClick = (state, action) => {\n  const isCorrect = action.payload;\n\n  const total = state.points.total + 1,\n    correct = state.points.correct + (isCorrect ? 1 : 0),\n    wrong = state.points.wrong + (isCorrect ? 0 : 1),\n    accuracy = (correct / total * 100) >> 0,\n    tg = Math.ceil(correct * correct / total * 5);\n\n  return {\n    ...state,\n    points: {\n      total,\n      correct,\n      wrong,\n      accuracy,\n      tg,\n    },\n    board: {\n      ...state.board,\n      colors: getRandomColors(\n        getCurrentSize(state),\n        getCurrentDifferences(state),\n      ),\n    },\n  };\n};\n\n/**\n * @returns {Object}\n */\nexport const colorClickAction = isCorrect => ({\n  type: 'COLOR_CLICK',\n  payload: isCorrect,\n});\n","import { connect } from 'react-redux';\nimport { Board } from './Board';\nimport { decrementTimerAction } from '../../actions/decrementTimer';\nimport { colorClickAction } from '../../actions/colorClick';\nimport { getCurrentSize } from '../../utils/getCurrentSize';\n\n/**\n * @param {AppState} state\n * @returns {AppProps}\n */\nconst mapStateToProps = state => ({\n  game: {\n    secondsLeft: state.game.secondsLeft,\n  },\n  board: {\n    colors: state.board.colors,\n  },\n  size: getCurrentSize(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  decrementTimer: () => dispatch(decrementTimerAction()),\n  colorClick: isCorrect => dispatch(colorClickAction(isCorrect)),\n});\n\nexport const BoardConnected =\n  connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { StartScreen } from '../StartScreen';\nimport { Board } from '../Board';\n\nexport class App extends Component {\n  render() {\n    return (\n      <div className={'app'}>\n        {this.props.game.isStarted ? <Board /> : <StartScreen />}\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { App } from './App';\n\n/**\n * @param {AppState} state\n * @returns {AppProps}\n */\nconst mapStateToProps = state => ({\n  game: {\n    isStarted: state.game.isStarted,\n  }\n});\n\nconst mapDispatchToProps = dispatch => ({\n});\n\n\nexport const AppConnected =\n  connect(mapStateToProps, mapDispatchToProps)(App);\n","import { getConfig } from '../utils/getConfig';\n\n/**\n * @type {AppState}\n */\nexport const defaultState = {\n  game: {\n    isStarted: false,\n    isFinished: false,\n    secondsLeft: 0,\n  },\n\n  config: getConfig(),\n\n  board: {\n    colors: [],\n  },\n\n  points: {\n    total: 0,\n    correct: 0,\n    wrong: 0,\n    accuracy: 0,\n    tg: 0,\n  },\n};\n","import { getRandomColors } from '../utils/getRandomColors';\nimport { getCurrentDifferences } from '../utils/getCurrentDifferences';\nimport { getCurrentSize } from '../utils/getCurrentSize';\n\n/**\n * @param {AppState} state\n * @returns {AppState}\n */\nexport const newRound = (state) => {\n  return {\n    ...state,\n    board: {\n      ...state.board,\n      colors: getRandomColors(\n        getCurrentSize(state),\n        getCurrentDifferences(state),\n      ),\n    },\n  };\n};\n\n/**\n * @returns {Object}\n */\nexport const newRoundAction = () => ({\n  type: 'NEW_ROUND',\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { mainReducer } from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStore(mainReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { defaultState } from './main.default';\nimport { newGame } from '../actions/newGame';\nimport { newRound } from '../actions/newRound';\nimport { decrementTimer } from '../actions/decrementTimer';\nimport { colorClick } from '../actions/colorClick';\nimport { setConfig } from '../actions/setConfig';\n\n/**\n * @param {AppState} state\n * @param {Object} action\n * @returns {AppState}\n */\nexport const mainReducer = (\n  state = defaultState,\n  action,\n) => {\n  switch (action.type) {\n    case 'NEW_GAME':\n      return newGame(state);\n\n    case 'NEW_ROUND':\n      return newRound(state);\n\n    case 'SET_CONFIG':\n      return setConfig(state, action);\n\n    case 'DECREMENT_TIMER':\n      return decrementTimer(state);\n\n    case 'COLOR_CLICK':\n      return colorClick(state, action);\n\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}