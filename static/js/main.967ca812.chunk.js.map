{"version":3,"sources":["utils/getRandom.js","utils/getRandomColor.js","utils/modifyColor.js","App.js","serviceWorker.js","index.js"],"names":["getRandom","maxValue","minValue","Math","random","getRandomColor","modifyColor","color","newColor","isCorrect","value","timesToChange","randomOffset","randomIndex","App","props","state","game","isStarted","isFinished","secondsLeft","colors","points","total","correct","wrong","accuracy","tg","interval","latestHover","this","startNewRound","setState","startInterval","callback","randomColorValue","colorsNumber","Array","fill","undefined","map","randomColorIndex","randomColor","setInterval","decrementTimer","clearInterval","newSeconds","endInterval","index","ceil","titleText","className","onClick","startNewGame","style","width","cell","key","backgroundColor","join","onMouseMove","handleHover","handleColorClick","renderStartScreen","renderBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.967ca812.chunk.js","sourcesContent":["/**\n * @param {Number} maxValue\n * @param {Number} minValue\n * @returns {Number}\n */\nexport const getRandom = (maxValue, minValue = 0) => {\n  return ((Math.random() * (maxValue - minValue + 1)) >> 0) + minValue;\n};\n","import { getRandom } from './getRandom';\n\n/**\n * @returns {Array<Number>}\n */\nexport const getRandomColor = () => {\n  return [ getRandom(255), getRandom(255), getRandom(255) ];\n};\n","import { getRandom } from './getRandom';\n\nexport const modifyColor = (color) => {\n  const newColor = {\n    isCorrect: true,\n    value: [ ...color.value ],\n  };\n\n  let timesToChange = 25,\n    randomOffset = getRandom(1) === 1 ? 1 : -1;\n\n  while (timesToChange--) {\n    const randomIndex = getRandom(2);\n    newColor.value[randomIndex] += randomOffset;\n\n    if (newColor.value[randomIndex] < 0) {\n      newColor.value[randomIndex] = 0;\n    }\n\n    if (newColor.value[randomIndex] > 255) {\n      newColor.value[randomIndex] = 255;\n    }\n  }\n\n  return newColor;\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { getRandomColor } from './utils/getRandomColor';\nimport { getRandom } from './utils/getRandom';\nimport { modifyColor } from './utils/modifyColor';\n\nconst seconds = 60;\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: {\n        isStarted: false,\n        isFinished: false,\n        secondsLeft: seconds,\n        colors: [],\n      },\n\n      points: {\n        total: 0,\n        correct: 0,\n        wrong: 0,\n        accuracy: 0,\n        tg: 0,\n      },\n    };\n\n    this.interval = -1;\n    this.latestHover = -1;\n  }\n\n  startNewGame() {\n    this.startNewRound(() => {\n      this.setState({\n        game: {\n          ...this.state.game,\n          isStarted: true,\n          isFinished: false,\n          secondsLeft: seconds,\n        },\n      }, () => {\n        this.startInterval();\n      });\n    });\n  }\n\n  startNewRound(callback = () => {}) {\n    const randomColorValue = getRandomColor(),\n      colorsNumber = 16;\n\n    const colors = new Array(colorsNumber)\n      .fill(undefined)\n      .map(() => ({\n        isCorrect: false,\n        value: randomColorValue,\n      }));\n\n    const randomColorIndex = getRandom(colorsNumber - 1),\n      randomColor = colors[randomColorIndex];\n\n    colors[randomColorIndex] = modifyColor(randomColor);\n\n    this.setState({\n      game: {\n        ...this.state.game,\n        colors,\n      },\n    }, () => callback());\n  }\n\n  startInterval() {\n    this.interval = setInterval(() => this.decrementTimer(), 1000);\n  }\n\n  endInterval() {\n    clearInterval(this.interval);\n  }\n\n  decrementTimer() {\n    const newSeconds = this.state.game.secondsLeft - 1;\n    if (!newSeconds) {\n      this.endInterval();\n      this.setState({\n        game: {\n          ...this.state.game,\n          isStarted: false,\n          isFinished: true,\n        },\n      });\n      return;\n    }\n\n    this.setState({\n      game: {\n        ...this.state.game,\n        secondsLeft: newSeconds,\n      },\n    });\n  }\n\n  /**\n   * @param {Number} index\n   */\n  handleHover(index) {\n    this.latestHover = index;\n  }\n\n  /**\n   * @param {Number} index\n   * @param {Boolean} isCorrect\n   */\n  handleColorClick(index, isCorrect) {\n    if (this.latestHover !== index) {\n      return;\n    }\n\n    const total = this.state.points.total + 1,\n      correct = this.state.points.correct + (isCorrect ? 1 : 0),\n      wrong = this.state.points.wrong + (isCorrect ? 0 : 1),\n      accuracy = (correct / total * 100) >> 0,\n      tg = Math.ceil(correct * correct / total * 5);\n\n    this.setState({\n      points: {\n        total,\n        correct,\n        wrong,\n        accuracy,\n        tg,\n      },\n    }, () => {\n      this.startNewRound();\n    });\n  }\n\n  renderStartScreen() {\n    if (this.state.game.isStarted) {\n      return;\n    }\n\n    let titleText;\n    if (this.state.game.isFinished) {\n      titleText = `Correct: ${this.state.points.correct}, Accuracy: ${this.state.points.accuracy}%, Points: ${this.state.points.tg}`;\n    } else {\n      titleText = `Find different color!`;\n    }\n\n    return (\n      <div className={'app-start-screen'}>\n        <div className={'app-start-screen-title'}>{titleText}</div>\n        <div className={'app-start-screen-btn'}>\n          <button className={'app-start-game'} onClick={() => this.startNewGame()}>\n            Start\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  renderBoard() {\n    if (!this.state.game.isStarted) {\n      return;\n    }\n\n    return (\n      <div className={'app-board'}>\n        <div className={'app-board-timer'} style={{ width: `${this.state.game.secondsLeft / seconds * 100}%` }} />\n        {this.state.game.colors.map((cell, index) => {\n          return (\n            <div\n              key={index}\n              className={'app-board-cell'}\n              style={{ backgroundColor: `rgb(${cell.value.join(', ')})` }}\n              onMouseMove={() => this.handleHover(index)}\n              onClick={() => this.handleColorClick(index, cell.isCorrect)}\n            >\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className={'app'}>\n        {this.renderStartScreen()}\n        {this.renderBoard()}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}